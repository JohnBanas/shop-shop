{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","utils/GlobalState.js","utils/reducers.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","dispatch","useDispatch","image","name","price","quantity","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","process","STRIPE_URI_ONE","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","id","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","createStore","action","newState","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.388b3e51.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n//indexdb\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS';\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const UPDATE_CATEGORIES = 'UPDATE_CATEGORIES';\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n  ","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport {  ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction ProductItem(item) {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n  \n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction ProductList() {\n  //global state and update fx's\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  \n  //set current category to destructured state\n  const { currentCategory } = state;\n  \n  //query the database for products\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  //use effect to on load try to get the query data\n  //or if data loads, then update global state with new products\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n    // since we're offline, get all of the data from the `products` store\n    idbPromise('products', 'get').then((products) => {\n      // use retrieved data to set global state for offline browsing\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n  }, [data, loading, dispatch]);\n\n\n  //if there isn't a current category selected return whatever products \n  //are currently in the global state if there is, filter out the category _id\n  // and make that the current category\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n  \n  \n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nfunction CategoryMenu() {\n  //uses global state 'state' and updates state with 'dispatch' \n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  //current categories destructured from the global state\n  const { categories } = state;\n  //query database for categories\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  console.log(categories);\n  useEffect(() => {\n    console.log('Use effect trigger.')\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  //changes global state on click event\n  const handleClick = _id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: _id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { useDispatch } from 'react-redux'\n\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst stripePromise = loadStripe(process.env.STRIPE_URI_ONE);\n\n\nconst Cart = () => {\n  //uses global state 'state' and updates state with 'dispatch' \n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  \n\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n  \n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      console.log(data);\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({type:TOGGLE_CART});\n  };\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  };\n\n  function submitCheckout() {\n    console.log('submit checkout function');\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n      console.log(productIds);\n    });\n    getCheckout({\n      variables: { products: productIds }\n    });\n  };\n\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\nimport { idbPromise } from \"../utils/helpers\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nfunction Detail() {\n  //global state and update fxs\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n  \n  //id from useParams();\n  const { id } = useParams();\n  //use state to set the current product\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  //query the database for the products\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //destructure products from global state\n  const { products, cart } = state;\n\n  //useEffect to see if products has a length, if so set the current \n  //product to the id that matches our params or if data is returned\n  //from our query, set those products to our global state\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the home page\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;\n","import { createStore } from 'redux';\nimport { reducer, initialState } from './reducers';\n\nexport const store = createStore(reducer, initialState);\n\n\n\n\n\n\n\n","import {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nexport const initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n          }\n          return product\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\nimport { store } from './utils/GlobalState';\nimport { Provider } from 'react-redux';\nimport OrderHistory from './pages/OrderHistory';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}